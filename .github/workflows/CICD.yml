name: CI/CD

on:
  push:
    branches:
      - main
      - develop
      - feature/cicd
      
permissions:
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Get short SHA
        id: slug
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'testDB'
          mysql user: 'test'
          mysql password: 'test'
          
      - name: Create application.yml for testing
        run: |
          mkdir -p ./backend/src/main/resources
          cat > ./backend/src/main/resources/application.yml << 'EOT'
          spring:
            datasource:
              url: jdbc:mysql://localhost:3306/testDB
              username: test
              password: test
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              hibernate:
                ddl-auto: create
              show-sql: true
              properties:
                hibernate:
                  format_sql: true
            data:
              redis:
                host: localhost
                port: 6379
          logging:
            level:
              web: debug
          commit:
            hash: ${COMMIT_HASH}
          cloud:
              aws:
                  credentials:
                      access-key: dummy-key-for-test
                      secret-key: dummy-secret-for-test
                  region: ap-northeast-2
                  s3:
                      bucket: dummy-bucket-for-test
          EOT
          sed -i "s|\${COMMIT_HASH}|${{ steps.slug.outputs.sha7 }}|g" ./backend/src/main/resources/application.yml
        shell: bash
        
      - name: Build with Gradle
        run: |
          cd backend
          chmod +x gradlew
          ./gradlew build
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
          
      - name: Create .env file and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            echo "Creating .env file with secure configuration..."
            cat > .env << EOL
            # Spring 데이터베이스 설정
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # AWS S3 설정
            AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
            AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            
            # 애플리케이션 설정
            COMMIT_HASH=${{ steps.slug.outputs.sha7 }}
            EOL
            
            # .env 파일 권한 제한
            chmod 600 .env
            
            echo "Stopping and removing existing Docker containers..."
            sudo docker rm -f $(sudo docker ps -aq) || echo "No containers to remove"
            
            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            
            echo "Starting deployment with Docker Compose..."
            sudo docker-compose up -d --build
            
            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f || echo "No images to prune"
