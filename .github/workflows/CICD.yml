name: CI/CD
on:
  push:
    branches:
      - main
      - develop
      - feature/cicd
permissions:
  contents: read
jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 1234
          MYSQL_DATABASE: testDB
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -p1234"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get short SHA
        id: slug
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Verify MySQL connection
        run: |
          sudo apt-get install -y mysql-client
          mysql -h127.0.0.1 -P3306 -uroot -p1234 -e "SHOW DATABASES;"
          
      - name: Create application.yml
        run: |
          mkdir -p ./backend/src/main/resources
          cat <<EOT > ./backend/src/main/resources/application.yml
          spring:
            datasource:
              url: ${{ secrets.DB_URL }}
              username: ${{ secrets.DB_USERNAME }}
              password: ${{ secrets.DB_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              hibernate:
                ddl-auto: create
              show-sql: true
              properties:
                hibernate:
                  format_sql: true
            data:
              redis:
                host: localhost
                port: 6379
          logging:
            level:
              web: debug
          commit:
            hash: ${{ steps.slug.outputs.sha7 }}
          spring:
            profiles:
              active: test
          EOT
        shell: bash
      
      - name: Create test application.yml
        run: |
          mkdir -p ./backend/src/test/resources
          cat <<EOT > ./backend/src/test/resources/application.yml
          spring:
            datasource:
              url: jdbc:mysql://localhost:3306/testDB?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
              username: root
              password: 1234
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              hibernate:
                ddl-auto: create-drop
              show-sql: true
              properties:
                hibernate:
                  format_sql: true
                  dialect: org.hibernate.dialect.MySQL8Dialect
            test:
              database:
                replace: none
          logging:
            level:
              web: debug
              org.hibernate.SQL: debug
              org.hibernate.type.descriptor.sql: trace
          commit:
            hash: test
          EOT
        shell: bash
      
      - name: Build with Gradle
        run: |
          cd backend
          chmod +x gradlew
          ./gradlew test --info
          ./gradlew build

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            echo "Stopping and removing existing Docker containers..."
            sudo docker rm -f $(sudo docker ps -aq) || echo "No containers to remove"

            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            echo "Starting deployment with Docker Compose..."
            cd ~
            sudo docker-compose up -d --build

            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f || echo "No images to prune"
