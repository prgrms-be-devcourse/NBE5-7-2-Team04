name: CI/CD

on:
  push:
    branches:
      - main
      - develop
      - feature/cicd

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short SHA
        id: slug
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'testDB'
          mysql user: 'root'
          mysql password: '1234'

      - name: Create application.yml
        run: |
          mkdir -p ./backend/src/main/resources
          cat <<EOT > ./backend/src/main/resources/application.yml
          spring:
            datasource:
              url: ${{ secrets.DB_URL }}
              username: ${{ secrets.DB_USERNAME }}
              password: ${{ secrets.DB_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver

            jpa:
              hibernate:
                ddl-auto: create
              show-sql: true
              properties:
                hibernate:
                  format_sql: true

            data:
              redis:
                host: localhost
                port: 6379

          logging:
            level:
              web: debug

          commit:
            hash: ${{ steps.slug.outputs.sha7 }}
          EOT
        shell: bash

      - name: Build with Gradle
        run: |
          cd backend
          chmod +x gradlew
          ./gradlew build

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            echo "Stopping and removing existing Docker containers..."
            sudo docker rm -f $(sudo docker ps -aq) || echo "No containers to remove"

            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            echo "Starting deployment with Docker Compose..."
            cd ~
            sudo docker-compose up -d --build

            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f || echo "No images to prune"
